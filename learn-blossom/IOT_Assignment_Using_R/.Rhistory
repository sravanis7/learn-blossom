axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-03-01 00:00:02"),
as.POSIXct("2017-03-30 23:59:00 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-03-01 00:00:00"),
as.POSIXct("2017-03-30 00:00:00")
))+
labs(x="March Timestamp")
plot2_N <- ggplot(data=subset(data_IOT_Imputed, date_time=c(as.POSIXct("2017-04-01"):as.POSIXct("2017-04-29"))),
aes(x=as.POSIXct(date_time), y=Noise))+
geom_density2d(color='hotpink')+
theme(text=element_text(size=8),
legend.text=element_text(size=8),
axis.text=element_text(size=8, colour="black"),
panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.y = element_text(size=8, vjust = 0.3),
axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-04-01 00:00:04"),
as.POSIXct("2017-04-29 23:59:08 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-04-01 00:00:00"),
as.POSIXct("2017-04-29 00:00:00")
)) +
labs(x="April Timestamp");
######
nOISE trend in MARCH AND April
#######
gb1 <- ggplot_build(plot1_N)
gb2 <- ggplot_build(plot2_N)
n1 <- length(gb1$panel$ranges[[1]]$y.labels)
n2 <- length(gb2$panel$ranges[[1]]$y.labels)
gA <- ggplot_gtable(gb1)
gB <- ggplot_gtable(gb2)
g <- gtable:::rbind_gtable(gA, gB, "last")
panels <- g$layout$t[grep("panel", g$layout$name)]
grid.newpage()
grid.draw(g)
plot1_N <- ggplot(data=subset(data_IOT_Imputed, date_time=c(as.POSIXct("2017-03-01"):as.POSIXct("2017-03-30"))) ,
aes(x=as.POSIXct(date_time), y=Noise), las=2)+
geom_line(color='grey31')+
theme(text=element_text(size=8),
legend.text=element_text(size=8),
axis.text=element_text(size=8, colour="black"),
panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.y = element_text(size=8, vjust = 0.3),
axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-03-01 00:00:02"),
as.POSIXct("2017-03-30 23:59:00 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-03-01 00:00:00"),
as.POSIXct("2017-03-30 00:00:00")
))+
labs(x="March Timestamp")
#April
plot2_N <- ggplot(data=subset(data_IOT_Imputed, date_time=c(as.POSIXct("2017-04-01"):as.POSIXct("2017-04-29"))),
aes(x=as.POSIXct(date_time), y=Noise))+
geom_line(color='hotpink')+
theme(text=element_text(size=8),
legend.text=element_text(size=8),
axis.text=element_text(size=8, colour="black"),
panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.y = element_text(size=8, vjust = 0.3),
axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-04-01 00:00:04"),
as.POSIXct("2017-04-29 23:59:08 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-04-01 00:00:00"),
as.POSIXct("2017-04-29 00:00:00")
)) +
labs(x="April Timestamp");
######
nOISE trend in MARCH AND April
#######
gb1 <- ggplot_build(plot1_N)
gb2 <- ggplot_build(plot2_N)
n1 <- length(gb1$panel$ranges[[1]]$y.labels)
n2 <- length(gb2$panel$ranges[[1]]$y.labels)
gA <- ggplot_gtable(gb1)
gB <- ggplot_gtable(gb2)
g <- gtable:::rbind_gtable(gA, gB, "last")
panels <- g$layout$t[grep("panel", g$layout$name)]
grid.newpage()
grid.draw(g)
plot1_N <- ggplot(data=subset(data_IOT_Imputed, date_time=c(as.POSIXct("2017-03-01"):as.POSIXct("2017-03-30"))) ,
aes(x=as.POSIXct(date_time), y=Noise), las=2)+
geom_density(color='grey31')+
theme(text=element_text(size=8),
legend.text=element_text(size=8),
axis.text=element_text(size=8, colour="black"),
panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.y = element_text(size=8, vjust = 0.3),
axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-03-01 00:00:02"),
as.POSIXct("2017-03-30 23:59:00 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-03-01 00:00:00"),
as.POSIXct("2017-03-30 00:00:00")
))+
labs(x="March Timestamp")
plot1_N
plot1_N <- ggplot(data=subset(data_IOT_Imputed, date_time=c(as.POSIXct("2017-03-01"):as.POSIXct("2017-03-30"))) ,
aes(x=as.POSIXct(date_time), y=Noise), las=2)+
geom_density(color='grey31')+
theme(text=element_text(size=8),
legend.text=element_text(size=8),
axis.text=element_text(size=8, colour="black"),
panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.y = element_text(size=8, vjust = 0.3),
axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-03-01 00:00:02"),
as.POSIXct("2017-03-30 23:59:00 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-03-01 00:00:00"),
as.POSIXct("2017-03-30 00:00:00")
))+
labs(x="March Timestamp")
plot1_N
plot1_N <- ggplot(data=subset(data_IOT_Imputed, date_time=c(as.POSIXct("2017-03-01"):as.POSIXct("2017-03-30"))) ,
aes(x=as.POSIXct(date_time), y=Noise), las=2)+
geom_density2d(color='grey31')+
theme(text=element_text(size=8),
legend.text=element_text(size=8),
axis.text=element_text(size=8, colour="black"),
panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.y = element_text(size=8, vjust = 0.3),
axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-03-01 00:00:02"),
as.POSIXct("2017-03-30 23:59:00 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-03-01 00:00:00"),
as.POSIXct("2017-03-30 00:00:00")
))+
labs(x="March Timestamp")
#April
plot2_N <- ggplot(data=subset(data_IOT_Imputed, date_time=c(as.POSIXct("2017-04-01"):as.POSIXct("2017-04-29"))),
aes(x=as.POSIXct(date_time), y=Noise))+
geom_density2d(color='hotpink')+
theme(text=element_text(size=8),
legend.text=element_text(size=8),
axis.text=element_text(size=8, colour="black"),
panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.y = element_text(size=8, vjust = 0.3),
axis.title.x = element_text(size=8, vjust = 0),
legend.key=element_rect(fill="white")) +
scale_x_datetime( breaks = seq(as.POSIXct("2017-04-01 00:00:04"),
as.POSIXct("2017-04-29 23:59:08 "), "24 hours"),
labels = date_format("%a-%d\n%m\n%H:%M"),
expand = c(0,0),
limits = c(
as.POSIXct("2017-04-01 00:00:00"),
as.POSIXct("2017-04-29 00:00:00")
)) +
labs(x="April Timestamp");
######
nOISE trend in MARCH AND April
#######
gb1 <- ggplot_build(plot1_N)
gb2 <- ggplot_build(plot2_N)
n1 <- length(gb1$panel$ranges[[1]]$y.labels)
n2 <- length(gb2$panel$ranges[[1]]$y.labels)
gA <- ggplot_gtable(gb1)
gB <- ggplot_gtable(gb2)
g <- gtable:::rbind_gtable(gA, gB, "last")
panels <- g$layout$t[grep("panel", g$layout$name)]
grid.newpage()
grid.draw(g)
d$EAQTemp[d$Temperature>=20 and d$Temperature<=25] ='Ideal'
d$EAQTemp[d$Temperature>=15 and d$Temperature<20] & d$EAQTemp[d$Temperature>25 and d$Temperature<=30]  ='Good'
d$EAQTemp[d$Temperature>30] ='Actionable'
data_IOT_Imputed_fea <- read.csv("E:/softies/FBA/Assignment 4 Prakash/assignment_data_prep_Non-Corrupted/IOT117.csv", na.strings = c("NA"," ",""))
data_IOT_Imputed_fea$date_time <- as.POSIXct(data_IOT_Imputed_fea$date_time,,format="%d/%m/%y %H:%M")
d<- data_IOT_Imputed_fea
d$EAQTemp[d$Temperature>=20 and d$Temperature<=25] ='Ideal'
d$EAQTemp[d$Temperature>=15 and d$Temperature<20] & d$EAQTemp[d$Temperature>25 and d$Temperature<=30]  ='Good'
d$EAQTemp[d$Temperature>30] ='Actionable'
d$level[d$Temperature>=20 and d$Temperature<=25] ='Ideal'
d$level[d$Temperature>=15 and d$Temperature<20] & d$EAQTemp[d$Temperature>25 and d$Temperature<=30]  ='Good'
d$level[d$Temperature>30] ='Actionable'
d$level[d$Temperature>=20 & d$Temperature<=25] ='Ideal'
d$level[d$Temperature>=15 & d$Temperature<20] | d$EAQTemp[d$Temperature>25 & d$Temperature<=30]  ='Good'
d$level[(d$Temperature>=15 & d$Temperature<20) | (d$Temperature>25 & d$Temperature<=30)]  ='Good'
d$level[d$Temperature>30] ='Actionable'
View(d)
d$EAQTemp[d$Temperature>=20 & d$Temperature<=25] ='Ideal'
d$EAQTemp[(d$Temperature>=15 & d$Temperature<20) | (d$Temperature>25 & d$Temperature<=30)]  ='Good'
d$EAQTemp[d$Temperature>30] ='Actionable'
within(d, rm(levels))
View(d)
within(d, rm(level))
View(d)
d_EAQ <-d[, !(colnames(d) %in% c("level"))]
View(d_EAQ)
d$EAQN[d$Noise=60] ='Ideal'
d$EAQN[(d$Noise>=55 & d$Noise<60) | (d$Noise>60 & d$Noise<=80)]  ='Good'
d$EAQN[d$Noise>80] ='Actionable'
d$EAQN[ d$Noise=60] ='Ideal'
d$EAQN[d_EAQ$Noise=60] ='Ideal'
d$EAQN[d_EAQ$Noise = 60] ='Ideal'
d$EAQN[d_EAQ$Noise == 60] ='Ideal'
d_EAQ$EAQN[(d_EAQ$Noise>=55 & d_EAQ$Noise<60) | (d_EAQ$Noise>60 & d_EAQ$Noise<=80)]  ='Good'
d_EAQ$EAQN[d_EAQ$Noise>80] ='Actionable'
d_EAQ$EAQL[d_EAQ$Light>=250 & d_EAQ$Light<=300] ='Ideal'
d_EAQ$EAQL[(d_EAQ$Light>300 & d_EAQ$Light<=500)]  ='Good'
d_EAQ$EAQL[d_EAQ$Light<250 | d_EAQ$Light >500] ='Actionable'
d_EAQ
View(d_EAQ)
d_EAQ$EAQC[d_EAQ$Co2>=350 & d_EAQ$Co2<=1000] ='Ideal'
d_EAQ$EAQC[(d_EAQ$Co2>1000 & d_EAQ$Co2<=2000)]  ='Good'
d_EAQ$EAQC[d_EAQ$Co2>2000] ='Actionable'
d<- data_IOT_Imputed_fea
View(d)
View(d_EAQ)
d<- data_IOT_Imputed_fea
d_EAQ <- d
View(d_EAQ)
d_EAQ$EAQ[(d$Temperature>=20 & d$Temperature<=25) |(d_EAQ$Noise == 60) | (d_EAQ$Light>=250 & d_EAQ$Light<=300)| (d_EAQ$Co2>=350 & d_EAQ$Co2<=1000) | (d_EAQ$VOC==3)| (d_EAQ$Humidity>=20 & d_EAQ$Humidity<=25)] ='Ideal'
d_EAQ$EAQ[(d$Temperature>=15 & d$Temperature<20) | (d$Temperature>25 & d$Temperature<=30) | (d_EAQ$Noise>=55 & d_EAQ$Noise<60) | (d_EAQ$Noise>60 & d_EAQ$Noise<=80) |
(d_EAQ$Light>300 & d_EAQ$Light<=500) | (d_EAQ$Co2>1000 & d_EAQ$Co2<=2000) | (d_EAQ$VOC> 3 & d_EAQ$VOC<=30) |(d_EAQ$Humidity>=15 & d_EAQ$Humidity<20) | (d_EAQ$Humidity>25 & d_EAQ$Humidity<=30)] ='Good'
d_EAQ$EAQ[(d$Temperature>30) | (d_EAQ$Noise>80) | (d_EAQ$Co2>2000)| (d_EAQ$VOC>30) | (d_EAQ$Humidity>30)] ="Actionable"
View(d_EAQ)
d_EAQ$EAQ[(d$Temperature>=20 & d$Temperature<=25) |(d_EAQ$Noise == 60) | (d_EAQ$Light>=250 & d_EAQ$Light<=300)| (d_EAQ$Co2>=350 & d_EAQ$Co2<=1000) | (d_EAQ$VOC==3)| (d_EAQ$Humidity>=45 & d_EAQ$Humidity<=55)] ='Ideal'
d_EAQ$EAQ[(d$Temperature>=15 & d$Temperature<20) | (d$Temperature>25 & d$Temperature<=30) | (d_EAQ$Noise>=55 & d_EAQ$Noise<60) | (d_EAQ$Noise>60 & d_EAQ$Noise<=80) |
(d_EAQ$Light>300 & d_EAQ$Light<=500) | (d_EAQ$Co2>1000 & d_EAQ$Co2<=2000) | (d_EAQ$VOC> 3 & d_EAQ$VOC<=30) |(d_EAQ$Humidity>=30 & d_EAQ$Humidity<45) | (d_EAQ$Humidity>55 & d_EAQ$Humidity<=60)] ='Good'
d_EAQ$EAQ[(d$Temperature>30) | (d_EAQ$Noise>80) | (d_EAQ$Co2>2000)| (d_EAQ$VOC>30) | (d_EAQ$Humidity>60)] ="Actionable"
View(d_EAQ)
d_EAQ$EAQ[(d$Temperature>=20 & d$Temperature<=25) |(d_EAQ$Noise == 60) | (d_EAQ$Light>=250 & d_EAQ$Light<=300)| (d_EAQ$Co2>=350 & d_EAQ$Co2<=1000) | (d_EAQ$VOC==3)| (d_EAQ$Humidity>=45 & d_EAQ$Humidity<=55)] ='Ideal'
d_EAQ$EAQ[(d$Temperature>=15 & d$Temperature<20) | (d$Temperature>25 & d$Temperature<=30) | (d_EAQ$Noise>=55 & d_EAQ$Noise<60) | (d_EAQ$Noise>60 & d_EAQ$Noise<=80) |
(d_EAQ$Light>300 & d_EAQ$Light<=500) | (d_EAQ$Co2>1000 & d_EAQ$Co2<=2000) | (d_EAQ$VOC> 3 & d_EAQ$VOC<=30) |(d_EAQ$Humidity>=30 & d_EAQ$Humidity<45) | (d_EAQ$Humidity>55 & d_EAQ$Humidity<=65)] ='Good'
d_EAQ$EAQ[(d$Temperature>30) | (d_EAQ$Noise>80) | (d_EAQ$Co2>2000)| (d_EAQ$VOC>30) | (d_EAQ$Humidity>65)] ="Actionable"
View(d_EAQ)
count(which(d_EAQ$EAQ=="Actionable")
count(which(d_EAQ$EAQ=="Actionable"))
Actionable_Items<- d_EAQ %>%
filter(EAQ=="Actionable")
Actionable_Items
count(Actionable_Items)
Actionable_Items<- d_EAQ %>%
filter(EAQ=="Actionable") %>%
summarise(count_a= n())
Actionable_Items
d_EAQ$EAQ[(d$Temperature>=20 & d$Temperature<=25) |(d_EAQ$Noise == 60) | (d_EAQ$Light>=250 & d_EAQ$Light<=300)| (d_EAQ$Co2>=350 & d_EAQ$Co2<=1000) | (d_EAQ$Humidity>=45 & d_EAQ$Humidity<=55)] ='Ideal'
d_EAQ$EAQ[(d$Temperature>=15 & d$Temperature<20) | (d$Temperature>25 & d$Temperature<=30) | (d_EAQ$Noise>=55 & d_EAQ$Noise<60) | (d_EAQ$Noise>60 & d_EAQ$Noise<=80) |
(d_EAQ$Light>300 & d_EAQ$Light<=500) | (d_EAQ$Co2>1000 & d_EAQ$Co2<=2000) | (d_EAQ$Humidity>=30 & d_EAQ$Humidity<45) | (d_EAQ$Humidity>55 & d_EAQ$Humidity<=65)] ='Good'
d_EAQ$EAQ[(d$Temperature>30) | (d_EAQ$Noise>80) | (d_EAQ$Co2>2000)| (d_EAQ$Humidity>65)] ="Actionable"
View(d_EAQ)
d_EAQ %>%
summarise(count_EAQ =count(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ, fill='skyblue')) %>%
geom_bar(color='black')+
labs(x="EAQ", y="Count of EAQs")
d_EAQ %>%
group_by(EAQ) %>%
summarise(count_EAQ =count(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ, fill='skyblue')) %>%
geom_bar(color='black')+
labs(x="EAQ", y="Count of EAQs")
d_EAQ %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ, fill='skyblue')) %>%
geom_bar(color='black')+
labs(x="EAQ", y="Count of EAQs")
d_EAQ %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) %>%
geom_bar(color='black')+
labs(x="EAQ", y="Count of EAQs")
d_EAQ %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) %>%
geom_bar(stat='identity',color='black')+
geom_text(aes(label=round(count_EAQ,2)), vjust=2)+
labs(x="EAQ", y="Count of EAQs")
d_EAQ[d_EAQ$EAQ] %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) %>%
geom_bar(stat='identity',color='black')
d_EAQ$EAQ %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) %>%
geom_bar(stat='identity',color='black')
as.data.table(d_EAQ[c("EAQ")])
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ))
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ))
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) %>%
geom_bar(stat='identity',color='black')
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
labs(x="EAQ", y="Count of EAQs")
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
geom_bar(aes(x=EAQ, y=count_EAQ)) +
labs(x="EAQ", y="Count of EAQs")
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggBar(aes(x=EAQ, y=count_EAQ)) +
labs(x="EAQ", y="Count of EAQs")
require(ggplot2)
require(ggiraph)
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggBar(aes(x=EAQ, y=count_EAQ)) +
labs(x="EAQ", y="Count of EAQs")
pacman::p_load('ggiraph','grid','scales','caTools','imputeTS','reshape2', 'zoo', 'readxl','XLConnect','magrittr','dplyr','plyr','plotly', 'tidyverse','data.table','lattice','lubridate')
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggBar(aes(x=EAQ, y=count_EAQ)) +
labs(x="EAQ", y="Count of EAQs")
pacman::p_load('ggiraphExtra ','grid','scales','caTools','imputeTS','reshape2', 'zoo', 'readxl','XLConnect','magrittr','dplyr','plyr','plotly', 'tidyverse','data.table','lattice','lubridate')
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggBar(aes(x=EAQ, y=count_EAQ)) +
labs(x="EAQ", y="Count of EAQs")
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar()+
labs(x="EAQ", y="Count of EAQs")
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity')+
labs(x="EAQ", y="Count of EAQs")
as.data.table(d_EAQ[c("EAQ")]) %>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ))
d_plot<- as.data.table(d_EAQ[c("EAQ")], na.rm=TRUE)
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity')+
labs(x="EAQ", y="Count of EAQs")
d_plot<- as.data.table(d_EAQ[c("EAQ")], na.rm=TRUE)
d_plot
d_plot<- as.data.table(d_EAQ[c("EAQ")], na.rm=TRUE)
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ), na.rm=TRUE) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity')+
labs(x="EAQ", y="Count of EAQs")
d_plot<- as.data.table(d_EAQ[c("EAQ")], na.rm=TRUE)
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ), na.rm=TRUE) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity')+
labs(x="EAQ", y="Count of EAQs")
d_plot<- as.data.table(d_EAQ[c("EAQ")], na.omit())
d_plot<- as.data.table(d_EAQ[c("EAQ")], na.omit)
d_plot
d_plot<- na.omit(d_EAQ)
d_plot
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ), na.rm=TRUE) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity')+
labs(x="EAQ", y="Count of EAQs")
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity', color='orchid2')+
labs(x="EAQ", y="Count of EAQs")
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ, fill='orchid2')) +
geom_bar(stat='identity', color='black')+
labs(x="EAQ", y="Count of EAQs")
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ, color='orchid')) +
geom_bar(stat='identity', color='black')+
labs(x="EAQ", y="Count of EAQs")
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ), color='orchid') +
geom_bar(stat='identity', color='black')+
labs(x="EAQ", y="Count of EAQs")
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ), fill='orchid') +
geom_bar(stat='identity', color='black')+
labs(x="EAQ", y="Count of EAQs")
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity', color="orchid2", fill="orchid")+
labs(x="EAQ", y="Count of EAQs")
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity', color="orchid2", fill="orchid")+
labs(x="EAQ", y="Count of EAQs")+ geom_text(aes(label=(count_EAQ,2), vjust=2))
d_plot%>%
group_by(EAQ) %>%
summarise(count_EAQ =length(EAQ)) %>%
ggplot(aes(x=EAQ, y=count_EAQ)) +
geom_bar(stat='identity', color="orchid2", fill="orchid")+
labs(x="EAQ", y="Count of EAQs")+ geom_text(aes(label=(count_EAQ), vjust=2))
source('~/IOT_EAQFeature.R')
source('~/IOT_EAQFeature.R')
source('~/IOT_EAQFeature.R')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
march.data <- read.csv("Assignment_Data.csv")
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
march.data <- read.csv("Assignment_Data.csv")
april.data <- read.csv("Assignment_Data2.csv")
str(march.data)
summary(march.data)
full.data <- rbind(march.data,april.data)
str(full.data)
summary(full.data)
rownames(full.data)
str(full.data)
full.data
str(full.data)
summary(full.data)
View(full.data)
rownames(full.data) <- NULL
rownames(full.data)
full.data$date_time <- as.POSIXct(full.data$date_time, format="%Y-%m-%d %H:%M") # correcting data type of data_time
full.zoo <- zoo(full.data[, -1],full.data[, 1])   #set date_time to Index
pacman::p_load('ggfortify','rAverage','chron','grid','scales','caTools','reshape2', 'zoo', 'readxl','XLConnect','magrittr','dplyr','plyr','plotly', 'tidyverse','data.table','lattice','lubridate', 'TTR', 'imputeTS')
full.zoo <- zoo(full.data[, -1],full.data[, 1])   #set date_time to Index
full.zoo
dkun<- bkp.march
dkun[,-1]
dkun<- bkp.march
dkun<- march.data
dkun[,-1]
dkun[,1]
dkun[]
full.zoo
final.data <- merge(full.zoo, zoo(, seq(start(full.zoo), end(full.zoo), by = "min")), all = TRUE) # merge complete zoo object with original dataset
final.data
final.data <- fortify.zoo(final.data) # convert zoo back to dataframe
colnames(final.data)[1] <- "date_time"
cols = c(3, 4, 5, 6, 7, 8)
final.data[,cols] %<>% lapply(function(x) as.numeric(as.character(x)))
str(final.data)
summary(final.data)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
march.data <- read.csv("Assignment_Data.csv")
april.data <- read.csv("Assignment_Data2.csv")
bkp.march <- march.data  # backup for march
bkp.april <- april.data  # backup for april
str(march.data)
april.data <- read.csv("Assignment_Data2.csv")
# taking backup of original dataset for comparison
bkp.march <- march.data  # backup for march
bkp.april <- april.data  # backup for april
# Structure, summary and head of imported datasets
str(march.data)
summary(march.data)
head(march.data)
str(april.data)
summary(april.data)
head(april.data)
str(april.data)
